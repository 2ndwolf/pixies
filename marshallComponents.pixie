<?xml version="1.0"?>
<PixieFileV1 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Pattern>(^(?&lt;indent&gt;\s*) 
((?&lt;type&gt;(?&lt;explicit&gt;e+x+p+l+i+c+i+)?[A-Za-z0-9:]+) |
([A-Za-z0-9:]+(?&lt;vector&gt;[A-Za-z0-9]+)\&lt;(?&lt;vectortype&gt;[A-Za-z0-9:]+)\&gt;))
\s
(?&lt;value&gt;[A-Za-z0-9]+)) |
(^(?&lt;indent&gt;\s*)(?&lt;enum&gt;[A-Z0-9]+),) |
(?&lt;prefix&gt;{},\s)(?&lt;value&gt;[A-Za-z0-9]+) |
(?&lt;endif&gt;\#endif)</Pattern>
  <Input>//=================================
// include guard
#ifndef _ganiInformation_h_
#define _ganiInformation_h_

#include &lt;vector&gt;
#include &lt;string&gt;

#include "include/enums.h"

namespace GaniBuilding {
  class SpriteDef {
    public:
      int index{};
      std::string image;
      int offX{};
      int offY{};
      int width{};
      int height{};
      std::string name;
      DefaultImageType defaultImage = NOTDEFAULT;

      SpriteDef() = default;

      SpriteDef(int pIndex, std::string pImage, int pOffX, int pOffY, int pWidth, int pHeight, std::string pName) : index(pIndex), image(pImage), offX(pOffX), offY(pOffY), width(pWidth), height(pHeight), name(pName) {
        if (pImage == "SPRITES") {
          defaultImage = SPRITES;
        } else if (pImage == "SHIELD") {
          defaultImage = SHIELD;
        } else if (pImage == "HEAD") {
          defaultImage = HEAD;
        } else if (pImage == "BODY") {
          defaultImage = BODY;
        } else if (pImage == "ATTR1") {
          defaultImage = ATTR1;
        } else if (pImage == "ATTR2") {
          defaultImage = ATTR2;
        } else if (pImage == "ATTR3") {
          defaultImage = ATTR3;
        } else if (pImage == "SWORD") {
          defaultImage = SWORD;
        } else if (pImage == "HORSE") {
          defaultImage = HORSE;
        } else if (pImage == "PARAM1") {
          defaultImage = PARAM1;
        } else if (pImage == "PARAM2") {
          defaultImage = PARAM2;
        } else if (pImage == "PARAM3") {
          defaultImage = PARAM3;
        }
      };
  };

  enum DefaultImageType {
    NOTDEFAULT,
    SPRITES,
    SHIELD,
    HEAD,
    BODY,
    SWORD,
    HORSE,
    PARAM1,
    ATTR1,
    PARAM2,
    ATTR2,
    PARAM3,
    ATTR3
  };

  class Sound {
    public:
      std::string fileName;
      int x{}, y{};

      Sound() = default;

      Sound(std::string &amp;pFileName, double pX, double pY) : fileName(pFileName), x(static_cast&lt;int&gt;(pX * 16)), y(static_cast&lt;int&gt;(pY * 16)) {};
  };

  class AniSprite {
    public:
      int spriteIndex{}, x{}, y{}, layer{};

      AniSprite() = default;

      AniSprite(int pSpriteIndex, int pX, int pY, int pLayer) : spriteIndex(pSpriteIndex), x(pX), y(pY), layer(pLayer) {};
  };

  class AniDir {
    public:
      Directions direction{};
      std::vector&lt;AniSprite&gt; aniSprites;

      AniDir() = default;

      explicit AniDir(Directions pDirection) : direction(pDirection) {};
  };

  class AniFrame {
    public:
      std::vector&lt;AniDir&gt; aniDirs;
      int wait{};
      std::vector&lt;Sound&gt; sounds;

      AniFrame() = default;
  };

  class AttachedSprite {
    public:
      int spriteA{}, spriteB{}, relX{}, relY{};

      AttachedSprite() = default;

      AttachedSprite(int pSpriteA, int pSpriteB, int pRelX, int pRelY) : spriteA(pSpriteA), spriteB(pSpriteB), relX(pRelX), relY(pRelY) {};
  };

  class GaniInformation {
    public:
      std::vector&lt;SpriteDef&gt; spriteDefs;
      std::vector&lt;AniFrame&gt; aniFrames;
      std::vector&lt;Property&gt; properties;
      std::vector&lt;AttachedSprite&gt; attachedSprites;
      std::vector&lt;std::string&gt; defaultAttributes;
      std::vector&lt;std::string&gt; defaultParameters;
      std::string defaultHead;
      std::string defaultBody;
      std::string nextGani = "none";

      GaniInformation() = default;
  };
}
#endif
</Input>
  <ReplacementString>${1} ${2}</ReplacementString>
  <Options>
    <PixieRegexOption Selected="false" OptionName="IgnoreCase" />
    <PixieRegexOption Selected="true" OptionName="Multiline" />
    <PixieRegexOption Selected="false" OptionName="ExplicitCapture" />
    <PixieRegexOption Selected="false" OptionName="Singleline" />
    <PixieRegexOption Selected="true" OptionName="IgnorePatternWhitespace" />
    <PixieRegexOption Selected="false" OptionName="RightToLeft" />
    <PixieRegexOption Selected="false" OptionName="ECMAScript" />
    <PixieRegexOption Selected="false" OptionName="CultureInvariant" />
  </Options>
  <ReplaceLiveOutput>true</ReplaceLiveOutput>
  <HighlightLiveOutput>true</HighlightLiveOutput>
  <PopulateReplacement>true</PopulateReplacement>
  <UseCodeReplacement>true</UseCodeReplacement>
  <ReplacementCode>int _matchCount;
bool firstDone;
string indentation;
string previousType;
string lastClassOccurence;

public string Replace(Match match)
{
	if(match.Groups["endif"].Length != 0){
		return indentation + "}\n}";
	}
	if(match.Groups["indent"].Length != 0){
		indentation = match.Groups["indent"].Value;
	}
	string options = "optional ";
	string type = "";

	if (match.Groups["type"].Value == "enum"){
		if(firstDone == true){
			_matchCount = 0;
			return match.Groups["indent"].Value + "}\n" +
			match.Groups["indent"].Value + "message " + match.Groups["value"].Value + " {";
		}
		firstDone = true;
		_matchCount = -1;
		return match.Groups["indent"].Value + "message " + match.Groups["value"].Value + " {";
	} else if (match.Groups["type"].Value == "namespace"){
		//firstDone = true;
		return match.Groups["indent"].Value + "message " + match.Groups["value"].Value + " {";
	} else if(match.Groups["type"].Value == "class"){
		lastClassOccurence = match.Groups["type"].Value;
		if(firstDone == true){
			_matchCount = 0;
			return match.Groups["indent"].Value + "}\n" +
			match.Groups["indent"].Value + "message " + match.Groups["value"].Value + " {";
		}
		firstDone = true;
		_matchCount = 0;
		return match.Groups["indent"].Value + "message " + match.Groups["value"].Value + " {";
	} else if(match.Groups["explicit"].Length == 0) {
		_matchCount++;

		if(match.Groups["type"].Length &gt; 0){
			type = Type(match.Groups["type"].Value);
		} else if(match.Groups["vector"].Length &gt; 0){
			options += "repeated ";
			type = Type(match.Groups["vectortype"].Value);

		}

		if(match.Groups["prefix"].Length &gt; 0){
			return indentation + options + previousType + match.Groups["value"].Value + " = " + _matchCount + ";";
		} else if(match.Groups["enum"].Length &gt; 0) {
			return indentation + match.Groups["enum"].Value + " = " + _matchCount + ";";
		} else	{
			return indentation + options + type + match.Groups["value"].Value + " = " + _matchCount + ";";
		}
	}

	return "";
}

public string Type(string type){
	switch(type){
		case "int":
			previousType = "int32 ";
			return "int32 ";
		case "std::string":
			previousType = "string ";
			return "string ";
		default:
			previousType = type;
			return type + " ";
	}
	return "";
}</ReplacementCode>
</PixieFileV1>